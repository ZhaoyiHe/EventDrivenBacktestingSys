# EventBuilder.py
# This file creates event elements for event queue.

class Event(object):
    pass


class MarketEvent(Event):

    def __init__(self):
        self.type = "MARKET"


# Strategy signal event.
class SignalEvent(Event):

    def __init__(self, datetime, symbol, timestamp, signal_type, order_price, weight=None):
        self.type = "SIGNAL"
        # self.strategy_id = strategy_id
        self.datetime = datetime
        self.timestamp = timestamp
        self.symbol = symbol
        self.signal_type = signal_type
        # self.strength = strength
        self.order_price = order_price
        self.weight = weight
        # self.limit_move = limit_move


# Order info generated by portfolio.
class OrderEvent(Event):

    def __init__(self, datetime, symbol, order_type, quantity, buy_or_sell, order_price, direction):
        self.type = "ORDER"
        self.datetime = datetime
        self.symbol = symbol
        self.order_type = order_type  # "MKT" or" LMT"
        self.quantity = quantity
        self.buy_or_sell = buy_or_sell  # "BUY" or "SELL"
        self.direction = direction  # "LONG" or "EXIT"
        self.order_price = order_price

    def print_order(self):
        """
        Print order info.
        print("Order: Symbol:%s, Type=%s, Quantity=%s, Direction=%s, Order_price=%s" %
              (self.symbol, self.order_type, self.quantity, self.direction, self.order_price))

        """
        pass


# The output of order execution.
class FillEvent(Event):

    def __init__(self, datetime, symbol, quantity, buy_or_sell,
                 fill_cost, commission=None):

        self.type = "FILL"
        self.datetime = datetime
        self.symbol = symbol
        # self.exchange = exchange
        self.quantity = quantity
        self.buy_or_sell = buy_or_sell
        self.fill_cost = fill_cost

        if commission is None:
            self.commission = self.calculate_commission()
        else:
            self.commission = commission

    def calculate_commission(self):
        """
        full_cost = 1.3
        if self.quantity <= 500:
            full_cost = max(1.3, 0.013 * self.quantity)
        else:
            full_cost = max(1.3, 0.008 * self.quantity)
        # full_cost = min(full_cost, 0.5 / 100.0 * self.quantity * self.fill_cost)
        return full_cost

        :return:
        """
        pass
